data <- data[order(data$account_id),]
grp <- group_by(data,account_id)
fdTPV <- summarise(grp, first_payment = min(payment_date))
data <- merge(data,fdTPV,by = "account_id", all = TRUE)
data$m <- ((year(data$payment_date) - year(data$first_payment))*12 + (month(data$payment_date) - month(data$first_payment)))
#organize mX
all_m <- 0:max(data$m)
diff_m <- setdiff(all_m,unique(data$m))
if (length(diff_m)>0){
for (i in 1:length(diff_m)){
data[dim(data)[1]+1,] <- NA
data[dim(data)[1],which(names(data)=="m")] <- diff_m[i]
}
}
#organize first_payment
max_date <- max(unique(data$payment_date),na.rm = TRUE)
min_date <- min(unique(data$first_payment),na.rm = TRUE)
all_date <- as.yearmon(seq(as.numeric(min_date),as.numeric(max_date),by = 1/12))
diff_date <- as.yearmon(setdiff(all_date,unique(data$first_payment)))
if (length(diff_date)>0){
for (i in 1:length(diff_date)){
data[dim(data)[1]+1,] <- NA
data[dim(data)[1],which(names(data)=="first_payment")] <- diff_date[i]
}
}
##client count
client_table <- xtabs(~first_payment+m,data = data, na.action = na.pass)
client_count <- colSums(client_table)
client_count_perc <- round((client_count/client_count[1]),digits = 4)
##tpv count/perc
tpv_table <- xtabs(tpv~first_payment+m,data = data, na.action = na.pass)
client_tpv_sum <- colSums(tpv_table)
client_tpv <- colSums(tpv_table)
client_tpv[1] <- client_tpv[1]/client_count[1]
for (i in 2:length(client_tpv)){
client_tpv[i] <- (client_tpv[i]/client_count[1]) + client_tpv[i-1]
}
client_tpv_perc <- round((client_tpv/client_tpv[1]),digits = 4)
client_tpv_perc <- client_tpv_sum
for (i in 1:(length(client_tpv_perc)-1)){
if(client_tpv_sum[i]!=0){
client_tpv_perc[i] <- (client_tpv_sum[i])/sum(tpv_table[(1:(length(tpv_table[,1])-i+1)),1])
}
else {
client_tpv_perc[i] <- 1
}
}
##receita count/perc
receita_table <- xtabs(receita~first_payment+m,data = data, na.action = na.pass)
client_receita_sum <- colSums(receita_table)
client_receita <- colSums(receita_table)
client_receita[1] <- client_receita[1]/client_count[1]
for (i in 2:length(client_receita)){
client_receita[i] <- (client_receita[i]/client_count[1]) + client_receita[i-1]
}
client_receita_perc <- client_receita_sum
for (i in 1:length(client_receita_perc)){
if(client_receita_sum[i]!=0){
client_receita_perc[i] <- (client_receita_sum[i])/sum(receita_table[(1:(length(receita_table[,1])-i+1)),1])
}
else {
client_receita_perc[i] <- 1
}
}
##churn mes
churn_perc <- client_count
for (i in 1:(length(churn_perc)-1)){
if(client_count[i]!=0){
churn_perc[i] <- ((client_count[i] - client_count[i+1] - client_table[(length(client_table[,1])-i+1),i])/client_count[i])
}
else {
churn_perc[i] <- 1
}
}
churn_perc[-length(churn_perc)]
##summary data
summary <- list (data = data,
client_table = client_table, client_count = client_count,client_count_perc = client_count_perc,
tpv_table = tpv_table, client_tpv = client_tpv, client_tpv_perc = client_tpv_perc,
receita_table = receita_table, client_receita = client_receita, client_receita_perc = client_receita_perc,
churn_perc = churn_perc)
print(Sys.time()-start_time)
return(summary)
}
#gera resumo de cohort para plot
churnBase <- function(base , comercial, churn_time = 4, tpv_group = c("F0","F1","F2","F3","F4","F5", "F6", "F7"), type = "all") {
#comercial<- read.csv("C:/Users/mauricio.chigutti/Google Drive/Clientes do Comercial/clientesComercial.csv",
#                     stringsAsFactors = FALSE, sep = ";")
comercial <- comercial[comercial$Account.Id!=0,c(2,3)]
names(comercial) <- c("owner_name","account.id")
base <- merge(base,comercial,by = "account.id", all = TRUE)
if ( type == "touch"){
base <- base[!is.na(base$owner_name),]
}else if(type == "touchless"){
base <- base[is.na(base$owner_name),]
}
table <- cohortSummary(base,tpv_group = tpv_group)
month_now <- as.yearmon(now())
month_min <- month_now - (churn_time-1)/12
n <- 1
mymonths <- vector()
mymonths[1] <- month_now
while(churn_time-n > 0){
mymonths[n+1] <- month_now - (n)/12
n = n + 1
}
mymonths <- as.character(as.yearmon(mymonths))
final <- list()
final$client_list <- table$data[table$data$first_payment >= month_min,]
final$client_list <- final$client_list[!is.na(final$client_list$account_id),]
final$table <- table$client_table[rownames(table$client_table)%in%mymonths,c(1:churn_time)]
##churn mes
client_perc <- colSums(final$table)
client_sum <- colSums(final$table)
for (i in 1:(length(client_perc))){
if(client_sum[i]!=0){
client_perc[i] <- (client_sum[i])/sum(final$table[(1:(length(final$table[,1])-i+1)),1])
}
else {
client_perc[i] <- 1
}
}
final$client_perc <- 1-client_perc
return (final)
}
#le base do goodata para cohort
getCohortBase <- function(path = "C:/Users/mauricio.chigutti/Google Drive/Cohort/Churn4.csv"){
base<- read.csv(path,
stringsAsFactors = FALSE,encoding = "UTF-8")
return(base)
}
#gera lista com churns do MX a partir de uma lista de contatos
filtraCohort <- function(lista_clientes, churn_time, churn_month) {
month_now <- as.yearmon(now())
month_min <- month_now - (churn_time-1)/12
month_max <- month_now - (churn_month)/12
lista_clientes$m_novo <- paste0("M",lista_clientes$m)
final <- dcast(data = lista_clientes, account_id + login + first_payment + tpv_group  ~ m_novo, value.var = "tpv")
final <- final[final$first_payment <= month_max,]
final <- final[is.na(final[,which(names(final)==paste0("M",churn_month))]),]
return (final)
}
base <- getCohortBase
base <- getCohortBase()
library(hubspotAPI)
setwd("C:/Users/mauricio.chigutti/Google Drive/API Integration/Funil Hubspot")
contatosD <- suppressWarnings(arrangeDate (read.csv("contatos.csv", sep = ",",stringsAsFactors = FALSE)))
cohortpath = "C:/Users/mauricio.chigutti/Google Drive/Cohort/Churn4.csv"
comercialpath = "C:/Users/mauricio.chigutti/Google Drive/Clientes do Comercial/clientesComercial.csv"
cohortBase <- getCohortBase(cohortpath)
comercial <- read.csv(comercialpath, stringsAsFactors = FALSE, sep = ";")
x <-filtraContatos(contatosD,vendedor = "all",type = "tri", lead_source_geral = "all", lead_source = "all", ecommerce_platform = "all", Q = 3)
library(shinydashboard)
library(magrittr)
library(httr)
library(jsonlite)
library(plyr)
library(dplyr)
library(grid)
library(lubridate)
library(ggplot2)
library(scales)
library(gridExtra)
library(zoo)
library(reshape2)
library(tidyr)
library(hubspotAPI)
x <-filtraContatos(contatosD,vendedor = "all",type = "tri", lead_source_geral = "all", lead_source = "all", ecommerce_platform = "all", Q = 3)
View(x)
criaFunilComercial(contatosD,vendedor = "all",type = "tri", lead_source_geral = "all", lead_source = "all", ecommerce_platform = "all", Q = 3)
x[x$email=="financeiro@espacocasaecia.com.br",]
a <- x[x$email=="financeiro@espacocasaecia.com.br",]
a
unicos <- unique(a$email)
a[a$email%in%unicos,]
unicos
aggregate(a,min())
aggregate(a,min
)
aggregate(a~emaol,min)
aggregate(a~email,min)
aggregate(a, by=email,min)
aggregate(a, by=email,FUN = min)
aggregate(a, by="email")
a
aggregate(a, by="email", FUN = min)
aggregate(a, by=list("email"), FUN = min)
a
aggregate(a, by=list("email"), FUN = min)
aggregate(a, by=list(email), FUN = min)
aggregate(a, by=list(a$email), FUN = min)
aggregate(a, by=list(a$email), FUN = min)
aggregate(a, by=list(a$email), FUN = max)
unicos <- aggregate(x, by=list(a$email), FUN = max)
unicos <- aggregate(x, by=list(x$email), FUN = min)
teste <- unique(unicos$email)
teste2 <- unique(x$email[x$estagio=="Reuniao"])
View(unicos)
View(x)
to <- x[c(which(names(x)=="deal_stage"),which(names(x)=="estagio")),]
View(to)
to <- x[,c(which(names(x)=="deal_stage"),which(names(x)=="estagio"))]
View(unicos)
x <-filtraContatos(contatosD,vendedor = "all",type = "tri", lead_source_geral = "all", lead_source = "all", ecommerce_platform = "all", Q = 3)
library(hubspotAPI)
library(httr)
library(jsonlite)
library(plyr)
library(dplyr)
library(grid)
library(lubridate)
library(ggplot2)
library(scales)
library(gridExtra)
library(zoo)
library(reshape2)
library(tidyr)
setwd("C:/Users/mauricio.chigutti/Google Drive/API Integration/Funil Hubspot")
cohortpath = "C:/Users/mauricio.chigutti/Google Drive/Cohort/Churn4.csv"
comercialpath = "C:/Users/mauricio.chigutti/Google Drive/Clientes do Comercial/clientesComercial.csv"
contatosD <- suppressWarnings(arrangeDate (read.csv("contatos.csv", sep = ",",stringsAsFactors = FALSE)))
filtrados <- filtraContatos(contatos = contatosD, type = "safra", dataRef = "2017-07-01", dataFinal = "2017-09-01")
meantime <- funilTempoMedio(filtrados)
meantime
meantime$resumo$`Marcelo Conforto`[,1]
mean(meantime$resumo$`Marcelo Conforto`[,1])
mean(meantime$resumo$`Marcelo Conforto`[,1], digits=0)
mean(meantime$resumo$`Marcelo Conforto`[,1], digits=1)
mean(meantime$resumo$`Marcelo Conforto`[,1], decimals=1)
mean(meantime$resumo$`Marcelo Conforto`[,1], decimal=1)
round(mean(meantime$resumo$`Marcelo Conforto`[,1]), digits=0)
round(meantime$table_sm), digits=0)
round(meantime$table_sm, digits=0)
meantime$table_sm
round(as.numeric(meantime$table_sm), digits=0)
as.numeric(meantime$table_sm)
library(hubspotAPI)
meantime <- funilTempoMedio(filtrados)
filtrados
meantime <- funilTempoMedio(filtrados)
library(hubspotAPI)
meantime <- funilTempoMedio(filtrados)
meantime
library(hubspotAPI)
meantime <- funilTempoMedio(filtrados)
meantime
shiny::runApp()
meantime$resumo[["Marcelo Conforto"]]
meantime$table_sm
filtraContatos(contatos = contatosD, type = "tri", Q = 3)
funilTempoMedio(filtraContatos(contatos = contatosD, type = "tri", Q = 3))
funilTempoMedio(filtraContatos(contatos = contatosD, type = "tri", Q = 3))$table_sm
library(hubspotAPI)
meantime$resumo$`Matheus Nicoletti`
rownames(meantime$resumo$`Matheus Nicoletti`)
data.table::data.table(meantime$resumo$`Matheus Nicoletti`)
data.table::data.table(meantime$resumo$`Matheus Nicoletti`,options = list(pageLength = 10))
library(hubspotAPI)
library(hubspotAPI)
a
10000/6000000o
10000/60000000
10000/60000000*100
a
library(splitstackshape)
library(tm)
library(SnowballCC)
library(RColorBrewer)
library(ggplot2)
library(wordcloud)
library(biclust)
library(cluster)
library(igraph)
library(fpc)
library(SnowballCC)
library(hubspotAPI)
topWords("eu nao sei o que eu posso posso escrever escrever")
library(RColorBrewer)
library(ggplot2)
library(wordcloud)
library(biclust)
library(cluster)
library(igraph)
library(fpc)
library(RWeka)
library(ggplot2)
library(scales)
library(slam)
library(hubspotAPI)
topWords("eu nao sei o que eu posso posso escrever escrever")
topWords("eu nao sei o que eu posso posso escrever escrever.!.")
a <- topWords("eu nao sei o que eu posso posso escrever escrever.!.")
plotWcloud(a)
plotWcloud(a)
topWords("eu nao sei o que eu posso posso escrever escrever.!.")
topWords("a a a a a a")
a <- topWords("a a a a a a")
a
topWords("eu nao sei o que eu posso posso escrever escrever.!.")
topWords("eu nao sei o que eu posso posso escrever escrever")
topWords("eu nao sei o que eu po")
topWords("eu nao sei ")
topWords("eu")
a
topWords("eu nao sei ")
a <- topWords("eu nao sei o que eu posso posso escrever escrever.!.")
a
class(a)
a
a$density
a$density <- a$word_freq/sum(a$word_freq)
a
a$density <- as.numeric(a$word_freq/sum(a$word_freq), digits=2)
a
a$density <- as.numeric(a$word_freq/sum(a$word_freq), decimal=2)
a
a$density <- as.numeric(a$word_freq/sum(a$word_freq), decimals=2)
a
a$density <- as.numeric(a$word_freq/sum(a$word_freq), digit=2)
a
a$density <- as.numeric(a$word_freq/sum(a$word_freq), digits=2)
a
a$density <- format(a$word_freq/sum(a$word_freq), digits=2)
a
library(hubspotAPI)
library(dplyr)
library(lubridate)
library(ggplot2)
library(scales)
library(gridExtra)
library(zoo)
library(reshape2)
library(tidyr)
####################################
####################################
##FUNCOES##
calculaRisco <- function(pormes,meses,pqueda){
#pormes<-smmes
#meses<-6
#pqueda<-0.9
pormes$anomes <- as.yearmon(paste(pormes$month,"/",pormes$year,sep=""),"%m/%Y")
pormes<-pormes[,c(1,4,6)]
#pega seis meses atras
tabela<-pormes[pormes$anomes>=as.yearmon(as.Date(as.yearmon(as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo")) -((meses)/12), frac = 1))&
pormes$anomes<as.yearmon(as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo")),]
tabela<-spread(tabela, key = anomes, value = TPV.month)
tabela<-na.omit(tabela)
for (i in 1:(meses-1)){
tabela[,(dim(tabela)[2]+1)] <- tabela[,i+2]/tabela[,i+1]<=pqueda
}
tabela$enviar.risco<- rowSums(tabela[,((meses+2):(2*meses))])>=(meses-2)
tabela$enviar.risco<- tabela[,dim(tabela)[2]-1]&tabela[,dim(tabela)[2]]
desaceleraRisco<-tabela[tabela$enviar.risco==TRUE,]
write.table(desaceleraRisco, file = paste("C:/Users/mauricio.chigutti/Google Drive/Risco/desaceleraRisco-",as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo"),".csv",sep=""), sep = ";", na = "",row.names=FALSE,dec=",")
final <- tabela[,c(1,dim(tabela)[2])]
return(final)
}
planilhaIdVendedor <- function (hubspot){
hubspot <- hubspot[hubspot$Owner.ID!="",]
hubspot <- hubspot[order(hubspot$Owner.ID),]
write.table(hubspot, file = paste("C:/Users/mauricio.chigutti/Google Drive/Clientes do Comercial/clientesComercial.csv",sep=""), sep = ";", na = "",row.names=FALSE)
}
####################################
####################################
##DATA FROM THE LAST 6 years only##
setwd("C:/Users/mauricio.chigutti/Google Drive/Atualiza Tudo Hub")
## baixar em https://analytics.totvs.com.br/#s=/gdc/projects/v0jnh3a7fn8elqtifaa0fjuy16pphbvr|analysisPage|head|/gdc/md/v0jnh3a7fn8elqtifaa0fjuy16pphbvr/obj/67752
## TPV authorized, Receita Authorized, Date, account id, super integrator, user category (sem deposito e transf)
goodata<-read.csv("tpv_cond_fat_plat link by id by day.csv")
names(goodata)<- c("Account.Id","ConditionN","Payment.Form","Date", "Integrador", "TPV", "Receita")
goodata$Date<-as.Date(goodata$Date, "%d-%m-%Y")
goodata2<-goodata
goodata2$Integrador<- as.character(goodata2$Integrador)
goodata2$month <- month(goodata2$Date)
goodata2$year <- year(goodata2$Date)
##baixar https://app.hubspot.com/lists/253924/list/2369/
##todos contatos do hubspot com Email, TPV hoje, TPV Mes -1, TPV Mes -2, Account ID,  faturamento_grupo,
##TPV Mes, TPV ontem, Condition, TPV Projetado, TPV TOtal, Receita Mes, Receita Total, plataforma_bd, TPV Max
hubspot<-read.csv("hubspot-contacts-all-contacts-com-account-id.csv",fileEncoding = "UTF-8-BOM")
hubspot2<-hubspot[,c(which(names(hubspot)=="Email"),which(names(hubspot)=="Account.Id"))]
##Agrupa por dia
grp_id_dia <- group_by(goodata2,Account.Id,Date)
smdia<-summarise(grp_id_dia, TPV.dia=sum(TPV))
#calcula TPV ontem e hoje
anteontem<-smdia[smdia$Date==seq(as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo"), length = 2, by = "-1 day")[2],,drop=F][,c(1,3)]
names(anteontem)<- c("Account.Id","TPV Anteontem")
ontem<-smdia[smdia$Date==seq(as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo"), length = 2, by = "-1 day")[2],,drop=F][,c(1,3)]
names(ontem)<- c("Account.Id","TPV Ontem")
fdTPV <- aggregate(Date ~ Account.Id, smdia, min)
names(fdTPV)<- c("Account.Id","First Day TPV")
fdTPV$`First Day TPV` <- format(fdTPV$`First Day TPV`, "%d/%m/%Y")
ldTPV<- aggregate(Date ~ Account.Id, smdia, max)
ldTPV$LastMonthTPV <- as.Date(paste("01/",month(ldTPV$Date),"/",year(ldTPV$Date),sep=""),"%d/%m/%Y")
names(ldTPV)<- c("Account.Id","Last Day TPV","Last Month TPV")
ldTPV$`Last Day TPV` <- format(ldTPV$`Last Day TPV`, "%d/%m/%Y")
ldTPV$`Last Month TPV` <- format(ldTPV$`Last Month TPV`, "%d/%m/%Y")
##agrupa ids por mes
grp_id_TPVmes <- group_by(goodata2,Account.Id,month,year)
smmes <- summarise(grp_id_TPVmes, TPV.month=sum(TPV), Receita.month=(sum(Receita)))
#calcula para meses anteriores e ultimo mes com TPV
mes3<-smmes[smmes$month==month(as.Date(as.yearmon(as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo")) -(3/12), frac = 1)) &
smmes$year==year(as.Date(as.yearmon(as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo")) -(3/12), frac = 1)),,drop = F][,c(1,4)]
names(mes3)<- c("Account.Id","TPV Mes -3")
mes2<-smmes[smmes$month==month(as.Date(as.yearmon(as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo")) -(2/12), frac = 1)) &
smmes$year==year(as.Date(as.yearmon(as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo")) -(2/12), frac = 1)),,drop = F][,c(1,4)]
names(mes2)<- c("Account.Id","TPV Mes -2")
mes1<-smmes[smmes$month==month(as.Date(as.yearmon(as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo")) -(1/12), frac = 1)) &
smmes$year==year(as.Date(as.yearmon(as.Date(now(),"%Y-%m-%d", tz="America/Sao_Paulo")) -(1/12), frac = 1)),,drop = F][,c(1,4)]
names(mes1)<- c("Account.Id","TPV Mes -1")
essemes <-smmes[smmes$month==month(now())&smmes$year==year(now()),,drop=F][,c(1,4,5)]
names(essemes)<- c("Account.Id","TPV Mes","Receita Mes")
#queda constante durante 6 meses
enviar.risco<-calculaRisco(smmes,6,0.9)
#TPV ano
grp_TPVano<- group_by(smmes[smmes$year==year(now()),,drop=F],Account.Id)
TPVano<-summarise(grp_TPVano, TPV.ano=sum(TPV.month), Receita.ano=(sum(Receita.month)))
##Calcula TPV max, total e Receita total
grp_id_mes <- group_by(goodata2,Account.Id,ConditionN,month,year)
sm1 <- summarise(grp_id_mes, TPV.month=sum(TPV), Receita.month=(sum(Receita)))
grp_id <- group_by(sm1,Account.Id,ConditionN)
sm2 <- summarise(grp_id,TPV.max = max(TPV.month), TPV.Total2 = sum(TPV.month),
Receita.Total=sum(Receita.month))
#adiciona grupo de faturamento
sm2$Faturamento_Grupo<-NA
sm2$Faturamento_Grupo[sm2$TPV.max >=0 & sm2$TPV.max <1000] <- "F0"
sm2$Faturamento_Grupo[sm2$TPV.max >=1000 & sm2$TPV.max <5000] <- "F1"
sm2$Faturamento_Grupo[sm2$TPV.max >=5000 & sm2$TPV.max <20000] <- "F2"
sm2$Faturamento_Grupo[sm2$TPV.max >=20000 & sm2$TPV.max <100000] <- "F3"
sm2$Faturamento_Grupo[sm2$TPV.max >=100000 & sm2$TPV.max <500000] <- "F4"
sm2$Faturamento_Grupo[sm2$TPV.max >=500000 & sm2$TPV.max <1000000] <- "F5"
sm2$Faturamento_Grupo[sm2$TPV.max >=1000000 & sm2$TPV.max <5000000] <- "F6"
sm2$Faturamento_Grupo[sm2$TPV.max >=5000000 & sm2$TPV.max] <- "F7"
##agrupa plat e payment
grp_plat <- group_by(goodata2,Account.Id,Integrador)
smplat <- summarise(grp_plat)
grp_plat2 <- group_by(smplat,Account.Id)
smplat2 <- summarise(grp_plat2, Integrador = paste(Integrador, collapse = ";"))
grp_payment <- group_by(goodata2,Account.Id,Payment.Form)
smpayment <- summarise(grp_payment, sum(TPV))
TPVBoleto <- smpayment[smpayment$Payment.Form=="Boleto",c(1,3),drop=F]
names(TPVBoleto)<- c("Account.Id","TPVBoleto")
TPVCartaoC <- smpayment[smpayment$Payment.Form=="Cartao de Credito",c(1,3),drop=F]
names(TPVCartaoC)<- c("Account.Id","TPVCartaoC")
TPVTransf <- smpayment[smpayment$Payment.Form=="Transferencia",c(1,3),drop=F]
names(TPVTransf)<- c("Account.Id","TPVTransf")
TPVCarteiraM <- smpayment[smpayment$Payment.Form==" Carteira Moip",c(1,3),drop=F]
names(TPVCarteiraM)<- c("Account.Id","TPVCarteiraM")
TPVCartaoD <- smpayment[smpayment$Payment.Form=="Cartao de Debito",c(1,3),drop=F]
names(TPVCartaoD)<- c("Account.Id","TPVCartaoD")
TPVFinanci <- smpayment[smpayment$Payment.Form=="Financiamento",c(1,3),drop=F]
names(TPVFinanci)<- c("Account.Id","TPVFinanci")
TPVCDMPOS <- smpayment[smpayment$Payment.Form=="Cartao de Debito - MPOS",c(1,3),drop=F]
names(TPVCDMPOS)<- c("Account.Id","TPVCDMPOS")
TPVCCMPOS <- smpayment[smpayment$Payment.Form=="Cartao de Credito - MPOS",c(1,3),drop=F]
names(TPVCCMPOS)<- c("Account.Id","TPVCCMPOS")
grp_payment2 <- group_by(smpayment,Account.Id)
smpayment2 <- summarise(grp_payment2,payment = paste(Payment.Form, collapse = ";"))
##merge mantendo tds ids -> mes-2,mes-1,mes,tpv ontem e tpv hoje com sm3
gooMerge<-Reduce(function(x, y) merge(x, y, by = "Account.Id", all=TRUE), list(anteontem, ontem, mes3, mes2, mes1, essemes, sm2, smplat2, smpayment2,
ldTPV, fdTPV,TPVBoleto,TPVCartaoC,TPVTransf,TPVCarteiraM,TPVCartaoD,
TPVFinanci,TPVCDMPOS,TPVCCMPOS,TPVano,enviar.risco))
gooMerge$enviar.risco[is.na(gooMerge$enviar.risco)]<-FALSE
TPVmerge <- merge(hubspot2,gooMerge, by = "Account.Id")
TPVsaida<- TPVmerge
TPVsaida$TPV.Projetado <- rowMeans(TPVsaida[,c(5:7)])
TPVsaida$TPV.Projetado <- as.numeric(format(TPVsaida$TPV.Projetado, digits=3, scientific = F))
names(TPVsaida)<- c("Account.Id","Email","TPV Anteontem","TPV Ontem","TPV Mes -3","TPV Mes -2", "TPV Mes -1","TPV Mes","Receita Mes","Condition",
"TPV Max","Total TPV","Receita.Total","Faturamento_Grupo","plataform_bd","payment form gd","Last Day TPV", "Last Month TPV",
"First Day TPV", "TPV.Boleto","TPV.Cartao.Credito","TPV.Transferencia","TPV.Carteira.Moip","TPV.Cartao.Debito","TPV.Financiamento",
"TPV.CDMPOS", "TPV.CCMPOS","TPV.Ano","Receita.Ano","Enviar.Risco","TPV.Projetado")
##Calcula porcentagens
TPVsaida$Receita.TPV.Mes <- 100*as.numeric(format(TPVsaida$`Receita Mes`/TPVsaida$`TPV Mes`, digits=3, scientific = F))
TPVsaida$TPV.Ontem.Anteontem <- 100*as.numeric(format(TPVsaida$`TPV Ontem`/TPVsaida$`TPV Anteontem`, digits=3, scientific = F))
TPVsaida$TPV.Mes.Mes.1 <- 100*as.numeric(format(TPVsaida$`TPV Mes -1`/TPVsaida$`TPV Mes -2`, digits=3, scientific = F))
TPVsaida$PBoleto <- 100*as.numeric(format(TPVsaida$TPV.Boleto/TPVsaida$`Total TPV`, digits=3, scientific = F))
TPVsaida$PCartao.Credito <- 100*as.numeric(format(TPVsaida$TPV.Cartao.Credito/TPVsaida$`Total TPV`, digits=3, scientific = F))
TPVsaida$PTransferencia <- 100*as.numeric(format(TPVsaida$TPV.Transferencia/TPVsaida$`Total TPV`, digits=3, scientific = F))
TPVsaida$PCarteira.Moip <- 100*as.numeric(format(TPVsaida$TPV.Carteira.Moip/TPVsaida$`Total TPV`, digits=3, scientific = F))
TPVsaida$PCartao.Debito <- 100*as.numeric(format(TPVsaida$TPV.Cartao.Debito/TPVsaida$`Total TPV`, digits=3, scientific = F))
TPVsaida$PFinanciamento <- 100*as.numeric(format(TPVsaida$TPV.Financiamento/TPVsaida$`Total TPV`, digits=3, scientific = F))
TPVsaida$PCDMPOS <- 100*as.numeric(format(TPVsaida$TPV.CDMPOS/TPVsaida$`Total TPV`, digits=3, scientific = F))
TPVsaida$PCCMPOS <- 100*as.numeric(format(TPVsaida$TPV.CCMPOS/TPVsaida$`Total TPV`, digits=3, scientific = F))
for (i in 1:dim(TPVsaida)[2]){
TPVsaida[is.na(TPVsaida[,i]),i] <- 0
}
write.table(TPVsaida, file = "TPV tudo total hub.csv", sep = ";", na = "",row.names=FALSE,dec=".")
planilhaIdVendedor(hubspot)
####################################
####################################
###OPCIONAL##
##churn
#churngoo<-gooMerge[!is.na(gooMerge$TPV.ano) & is.na(gooMerge$`TPV Mes -1`) & is.na(gooMerge$`TPV Mes`) & gooMerge$Faturamento_Grupo%in%c("F3","F4","F5","F6","F7"),,drop=F]
#base relacionamentos:
#https://analytics.totvs.com.br/#s=/gdc/projects/v0jnh3a7fn8elqtifaa0fjuy16pphbvr|analysisPage|head|/gdc/md/v0jnh3a7fn8elqtifaa0fjuy16pphbvr/obj/59376
#relacionamentos <- read.csv("Base Congelada 2016 - Mauricio.csv")[1:3]
#names(relacionamentos)<-c("login","account.owner","Account.Id")
#churnreal<-merge(churn, relacionamentos, by = "Account.Id")
#x<-churn[churn$Account.Id%in%setdiff(churn$Account.Id,relacionamentos$Account.Id),,drop=F]
#x$login<-NA
#x$account.owner<-NA
#churnreal2<-rbind(churnreal,x)
#write.table(churnreal2, file = "churnMoip.csv", sep = ";", na = "",row.names=FALSE,dec=",")
##queda brusca
#gooMerge$queda<-100*gooMerge$`TPV Mes -1`/gooMerge$`TPV Mes -2`
#p_churn<- gooMerge[!is.na(gooMerge$queda) & gooMerge$queda<=20 & gooMerge$Faturamento_Grupo%in%c("F3","F4","F5","F6","F7"),,]
##calcula difetenc?a pro hub
#x<-setdiff(gooMerge$Account.Id,TPVsaida$Account.Id)
#investigar<-gooMerge[gooMerge$Account.Id%in%x & gooMerge$ConditionN=="ATIVO" & gooMerge$Faturamento_Grupo%in%c("F3","F4","F5","F6","F7") & (gooMerge$Integrador=="" | gooMerge$Integrador==";"| gooMerge$Integrador==";                                                                           "),,drop=F]
##escreve arquivos de saida
#write.table(gooMerge, file = "gooMerge.csv", sep = ";", na = "",row.names=FALSE,dec=",")
#write.table(investigar, file = "investigar.csv", sep = ";", na = "",row.names=FALSE,dec=",")
#write.table(investigar, file = "churn.csv", sep = ";", na = "",row.names=FALSE,dec=",")
