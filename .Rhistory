dataRef <- as.Date(paste(year(now()),"-10-01",sep=""))
}
}
else if (!is.null(dataRef)){
if (is.null(Q)){
Q <- quarter(dataRef)
}
if (Q == 1){
dataRef <- as.Date(paste(year(dataRef),"-01-01",sep=""))
}else if (Q == 2){
dataRef <- as.Date(paste(year(dataRef),"-04-01",sep=""))
}else if (Q == 3){
dataRef <- as.Date(paste(year(dataRef),"-07-01",sep=""))
}else {
dataRef <- as.Date(paste(year(dataRef),"-10-01",sep=""))
}
}
dataFinal <- dataRef
month(dataFinal) <- month(dataRef) + 2
day(dataFinal) <- days_in_month(dataFinal)
reuniao <- contatosD[(!is.na(contatosD$reuniao_date) &
(contatosD$reuniao_date>=dataRef) &
(contatosD$reuniao_date<=dataFinal) &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
pcontato <- contatosD[(!is.na(contatosD$prim_contato_date) &
(contatosD$prim_contato_date>=dataRef) &
(contatosD$prim_contato_date<=dataFinal) &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
qualificado <- contatosD[(!is.na(contatosD$qualificado_date) &
(contatosD$qualificado_date>=dataRef) &
(contatosD$qualificado_date<=dataFinal) &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
penviada <- contatosD[(!is.na(contatosD$prop_enviada_date) &
(contatosD$prop_enviada_date>=dataRef) &
(contatosD$prop_enviada_date<=dataFinal) &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
paceita <- contatosD[(!is.na(contatosD$prop_aceita_date) &
(contatosD$prop_aceita_date>=dataRef) &
(contatosD$prop_aceita_date<=dataFinal) &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
emintegracao <- contatosD[(!is.na(contatosD$em_integracao_date) &
(contatosD$em_integracao_date>=dataRef) &
(contatosD$em_integracao_date<=dataFinal) &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
integrado <- contatosD[(!is.na(contatosD$integrado_date) &
(contatosD$integrado_date>=dataRef) &
(contatosD$integrado_date<=dataFinal) &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
convertido <- contatosD[(!is.na(contatosD$convertido_date) &
(contatosD$convertido_date>=dataRef) &
(contatosD$convertido_date<=dataFinal) &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform &
contatos$deal_stage=="Convertido"),]
}
## visao de safra ##
else {
if (is.null(dataRef)){
dataRef <- as.Date(paste(year(now()),"-01-01",sep=""))
}
if (is.null(dataFinal)){
dataFinal <- as.Date(paste(year(dataRef),"-12-31",sep=""))
}
reuniao <- contatosD[(!is.na(contatosD$reuniao_date) &
contatosD$reuniao_date>=dataRef &
contatosD$reuniao_date<=dataFinal &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
pcontato <- contatosD[(!is.na(contatosD$reuniao_date) &
contatosD$reuniao_date>=dataRef &
contatosD$reuniao_date<=dataFinal &
!is.na(contatosD$prim_contato_date) &
contatosD$prim_contato_date>=dataRef &
contatosD$prim_contato_date<=dataFinal &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
qualificado <- contatosD[(!is.na(contatosD$reuniao_date) &
contatosD$reuniao_date>=dataRef &
contatosD$reuniao_date<=dataFinal &
!is.na(contatosD$qualificado_date) &
contatosD$qualificado_date>=dataRef &
contatosD$qualificado_date<=dataFinal &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
penviada <- contatosD[(!is.na(contatosD$reuniao_date) &
contatosD$reuniao_date>=dataRef &
contatosD$reuniao_date<=dataFinal &
!is.na(contatosD$prop_enviada_date) &
contatosD$prop_enviada_date>=dataRef &
contatosD$prop_enviada_date<=dataFinal &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
paceita <- contatosD[(!is.na(contatosD$reuniao_date) &
contatosD$reuniao_date>=dataRef &
contatosD$reuniao_date<=dataFinal &
!is.na(contatosD$prop_aceita_date) &
contatosD$prop_aceita_date>=dataRef &
contatosD$prop_aceita_date<=dataFinal &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
emintegracao <- contatosD[(!is.na(contatosD$reuniao_date) &
contatosD$reuniao_date>=dataRef &
contatosD$reuniao_date<=dataFinal &
!is.na(contatosD$em_integracao_date) &
contatosD$em_integracao_date>=dataRef &
contatosD$em_integracao_date<=dataFinal &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
integrado <- contatosD[(!is.na(contatosD$reuniao_date) &
contatosD$reuniao_date>=dataRef &
contatosD$reuniao_date<=dataFinal &
!is.na(contatosD$integrado_date) &
contatosD$integrado_date>=dataRef &
contatosD$integrado_date<=dataFinal &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform),]
convertido <- contatosD[(!is.na(contatosD$reuniao_date) &
contatosD$reuniao_date>=dataRef &
contatosD$reuniao_date<=dataFinal &
!is.na(contatosD$convertido_date) &
contatosD$convertido_date>=dataRef &
contatosD$convertido_date<=dataFinal &
contatosD$hubspot_owner_name%in%vendedor &
contatosD$lead_source_geral_new%in%lead_source_geral &
contatosD$lead_source_new%in%lead_source &
contatosD$ecommerce_platform%in%ecommerce_platform &
contatos$deal_stage=="Convertido"),]
}
reuniao$estagio <- "Reuniao"
pcontato$estagio <- "Primeiro Contato"
qualificado$estagio <- "Qualificado"
penviada$estagio <- "Proposta Enviada"
paceita$estagio <- "Proposta Aceita"
emintegracao$estagio <- "Em Integracao"
integrado$estagio <- "Integrado"
convertido$estagio <- "Convertido"
final <- rbind(reuniao,pcontato,qualificado,penviada,paceita,emintegracao,integrado,convertido)
return (final)
}
#format contacts csv
formatContactcsv <- function(contacts) {
contacts$opp_new_date<-as.Date(contacts$opp_new_date)
contacts$became_customer_new<- as.Date(contacts$became_customer_new)
contacts$reuniao_date<- as.Date(contacts$reuniao_date)
contacts$prim_contato_date<-as.Date(contacts$prim_contato_date)
contacts$qualificado_date<-as.Date(contacts$qualificado_date)
contacts$prop_enviada_date<-as.Date(contacts$prop_enviada_date)
contacts$prop_aceita_date<- as.Date(contacts$prop_aceita_date)
contacts$em_integracao_date<-as.Date(contacts$em_integracao_date)
contacts$integrado_date<-as.Date(contacts$integrado_date)
contacts$convertido_date<-as.Date(contacts$convertido_date)
contacts$nao_e_pra_agora_date<-as.Date(contacts$nao_e_pra_agora_date)
contacts$perdido_date<-as.Date(contacts$perdido_date)
contacts$hs_lifecyclestage_lead_date<-as.Date(contacts$hs_lifecyclestage_lead_date)
contacts$hs_lifecyclestage_marketingqualifiedlead_date<-as.Date(contacts$hs_lifecyclestage_marketingqualifiedlead_date)
contacts$lastmodifieddate<-as.Date(contacts$lastmodifieddate)
contacts$account_id<-as.numeric(contacts$account_id)
contacts$hubspotscore<-as.numeric(contacts$hubspotscore)
contacts$receita_ano<-as.numeric(contacts$receita_ano)
contacts$receita_mes<-as.numeric(contacts$receita_mes)
contacts$receita_total<-as.numeric(contacts$receita_total)
contacts$total_tpv<-as.numeric(contacts$total_tpv)
contacts$tpv_ano<-as.numeric(contacts$tpv_ano)
contacts$tpv_anteontem<-as.numeric(contacts$tpv_anteontem)
contacts$tpv_ontem<-as.numeric(contacts$tpv_ontem)
contacts$tpv_max<-as.numeric(contacts$tpv_max)
contacts$tpv_mes<-as.numeric(contacts$tpv_mes)
contacts$tpv_mes_1<-as.numeric(contacts$tpv_mes_1)
contacts$tpv_mes_2<-as.numeric(contacts$tpv_mes_2)
contacts$tpv_mes_3<-as.numeric(contacts$tpv_mes_3)
}
#gera resumo de cohort
cohortSummary <- function (dataRaw = NULL, tpv_group = "all", path = NULL) {
start_time <- Sys.time()
print("Working on it...")
if (is.null(dataRaw)){
if (is.null(path)) {
path <- readline(prompt="Enter complete file path: ")
}
dataRaw<- read.csv(path,stringsAsFactors = FALSE,encoding = "UTF-8")
dataRaw$tpv.group[dataRaw$tpv.group=="Large"]<-"F5"
names(dataRaw) <- c("account_id","tpv_group_bd","login","payment_date","account_fauth","state","super_integrator", "tpv","receita",
"n_payments_submitted", "n_payments_canceled", "n_payments_authorized", "n_payments_analysis", "n_payments_pre",
"n_payments")
}else {
dataRaw$tpv.group[dataRaw$tpv.group=="Large"]<-"F5"
names(dataRaw) <- c("account_id","tpv_group_bd","login","payment_date","account_fauth","state","super_integrator", "tpv","receita",
"n_payments_submitted", "n_payments_canceled", "n_payments_authorized", "n_payments_analysis", "n_payments_pre",
"n_payments", "owner_name")
}
grp_data <- group_by(dataRaw, account_id, login, tpv_group_bd, account_fauth, payment_date)
sum_data <- summarise(grp_data, tpv = sum(tpv), receita = sum(receita), n_payments_submitted = sum(n_payments_submitted),
n_payments_canceled = sum(n_payments_canceled), n_payments_authorized = sum(n_payments_authorized),
n_payments_analysis = sum(n_payments_analysis), n_payments_pre = sum(n_payments_pre),
n_payments = sum(n_payments))
fatData <- sum_data[!(sum_data$payment_date==""),]
grp_fat <- group_by(fatData, account_id)
sum_fat <- summarise(grp_fat, tpv = max(tpv, na.rm = TRUE))
sum_fat$tpv_group<-NA
sum_fat$tpv_group[sum_fat$tpv >=0 & sum_fat$tpv <1000] <- "F0"
sum_fat$tpv_group[sum_fat$tpv >=1000 & sum_fat$tpv <5000] <- "F1"
sum_fat$tpv_group[sum_fat$tpv >=5000 & sum_fat$tpv <20000] <- "F2"
sum_fat$tpv_group[sum_fat$tpv >=20000 & sum_fat$tpv <100000] <- "F3"
sum_fat$tpv_group[sum_fat$tpv >=100000 & sum_fat$tpv <500000] <- "F4"
sum_fat$tpv_group[sum_fat$tpv >=500000 & sum_fat$tpv <1000000] <- "F5"
sum_fat$tpv_group[sum_fat$tpv >=1000000 & sum_fat$tpv <5000000] <- "F6"
sum_fat$tpv_group[sum_fat$tpv >=5000000 & sum_fat$tpv] <- "F7"
sum_fat <- sum_fat[,c(which(names(sum_fat)=="account_id"),which(names(sum_fat)=="tpv_group"))]
sum_data <- merge(sum_data, sum_fat, by = "account_id", all = TRUE)
if (tpv_group == "all") {
tpv_group <- unique(sum_data$tpv_group)
}
data <- sum_data[sum_data$tpv_group%in%tpv_group&!(sum_data$payment_date==""),]
#data <- dataRaw[dataRaw$tpv.group%in%tpv_group,]
data$payment_date <- as.yearmon(data$payment_date,"%m/%Y")
data$account_fauth <- as.Date(data$account_fauth)
data$account_fauth <- as.yearmon(data$account_fauth,"%m/%Y")
##arrange date first payment
data <- data[order(data$account_id),]
grp <- group_by(data,account_id)
fdTPV <- summarise(grp, first_payment = min(payment_date))
data <- merge(data,fdTPV,by = "account_id", all = TRUE)
data$m <- ((year(data$payment_date) - year(data$first_payment))*12 + (month(data$payment_date) - month(data$first_payment)))
#organize mX
all_m <- 0:max(data$m)
diff_m <- setdiff(all_m,unique(data$m))
if (length(diff_m)>0){
for (i in 1:length(diff_m)){
data[dim(data)[1]+1,] <- NA
data[dim(data)[1],which(names(data)=="m")] <- diff_m[i]
}
}
#organize first_payment
max_date <- max(unique(data$payment_date),na.rm = TRUE)
min_date <- min(unique(data$first_payment),na.rm = TRUE)
all_date <- as.yearmon(seq(as.numeric(min_date),as.numeric(max_date),by = 1/12))
diff_date <- as.yearmon(setdiff(all_date,unique(data$first_payment)))
if (length(diff_date)>0){
for (i in 1:length(diff_date)){
data[dim(data)[1]+1,] <- NA
data[dim(data)[1],which(names(data)=="first_payment")] <- diff_date[i]
}
}
##client count
client_table <- xtabs(~first_payment+m,data = data, na.action = na.pass)
client_count <- colSums(client_table)
client_count_perc <- round((client_count/client_count[1]),digits = 4)
##tpv count/perc
tpv_table <- xtabs(tpv~first_payment+m,data = data, na.action = na.pass)
client_tpv_sum <- colSums(tpv_table)
client_tpv <- colSums(tpv_table)
client_tpv[1] <- client_tpv[1]/client_count[1]
for (i in 2:length(client_tpv)){
client_tpv[i] <- (client_tpv[i]/client_count[1]) + client_tpv[i-1]
}
client_tpv_perc <- round((client_tpv/client_tpv[1]),digits = 4)
client_tpv_perc <- client_tpv_sum
for (i in 1:(length(client_tpv_perc)-1)){
if(client_tpv_sum[i]!=0){
client_tpv_perc[i] <- (client_tpv_sum[i])/sum(tpv_table[(1:(length(tpv_table[,1])-i+1)),1])
}
else {
client_tpv_perc[i] <- 1
}
}
##receita count/perc
receita_table <- xtabs(receita~first_payment+m,data = data, na.action = na.pass)
client_receita_sum <- colSums(receita_table)
client_receita <- colSums(receita_table)
client_receita[1] <- client_receita[1]/client_count[1]
for (i in 2:length(client_receita)){
client_receita[i] <- (client_receita[i]/client_count[1]) + client_receita[i-1]
}
client_receita_perc <- client_receita_sum
for (i in 1:length(client_receita_perc)){
if(client_receita_sum[i]!=0){
client_receita_perc[i] <- (client_receita_sum[i])/sum(receita_table[(1:(length(receita_table[,1])-i+1)),1])
}
else {
client_receita_perc[i] <- 1
}
}
##churn mes
churn_perc <- client_count
for (i in 1:(length(churn_perc)-1)){
if(client_count[i]!=0){
churn_perc[i] <- ((client_count[i] - client_count[i+1] - client_table[(length(client_table[,1])-i+1),i])/client_count[i])
}
else {
churn_perc[i] <- 1
}
}
churn_perc[-length(churn_perc)]
##summary data
summary <- list (data = data,
client_table = client_table, client_count = client_count,client_count_perc = client_count_perc,
tpv_table = tpv_table, client_tpv = client_tpv, client_tpv_perc = client_tpv_perc,
receita_table = receita_table, client_receita = client_receita, client_receita_perc = client_receita_perc,
churn_perc = churn_perc)
print(Sys.time()-start_time)
return(summary)
}
#gera resumo de cohort para plot
churnBase <- function(base , comercial, churn_time = 4, tpv_group = c("F0","F1","F2","F3","F4","F5", "F6", "F7"), type = "all") {
#comercial<- read.csv("C:/Users/mauricio.chigutti/Google Drive/Clientes do Comercial/clientesComercial.csv",
#                     stringsAsFactors = FALSE, sep = ";")
comercial <- comercial[comercial$Account.Id!=0,c(2,3)]
names(comercial) <- c("owner_name","account.id")
base <- merge(base,comercial,by = "account.id", all = TRUE)
if ( type == "touch"){
base <- base[!is.na(base$owner_name),]
}else if(type == "touchless"){
base <- base[is.na(base$owner_name),]
}
table <- cohortSummary(base,tpv_group = tpv_group)
month_now <- as.yearmon(now())
month_min <- month_now - (churn_time-1)/12
n <- 1
mymonths <- vector()
mymonths[1] <- month_now
while(churn_time-n > 0){
mymonths[n+1] <- month_now - (n)/12
n = n + 1
}
mymonths <- as.character(as.yearmon(mymonths))
final <- list()
final$client_list <- table$data[table$data$first_payment >= month_min,]
final$client_list <- final$client_list[!is.na(final$client_list$account_id),]
final$table <- table$client_table[rownames(table$client_table)%in%mymonths,c(1:churn_time)]
##churn mes
client_perc <- colSums(final$table)
client_sum <- colSums(final$table)
for (i in 1:(length(client_perc))){
if(client_sum[i]!=0){
client_perc[i] <- (client_sum[i])/sum(final$table[(1:(length(final$table[,1])-i+1)),1])
}
else {
client_perc[i] <- 1
}
}
final$client_perc <- 1-client_perc
return (final)
}
#le base do goodata para cohort
getCohortBase <- function(path = "C:/Users/mauricio.chigutti/Google Drive/Cohort/Churn4.csv"){
base<- read.csv(path,
stringsAsFactors = FALSE,encoding = "UTF-8")
return(base)
}
#gera lista com churns do MX a partir de uma lista de contatos
filtraCohort <- function(lista_clientes, churn_time, churn_month) {
month_now <- as.yearmon(now())
month_min <- month_now - (churn_time-1)/12
month_max <- month_now - (churn_month)/12
lista_clientes$m_novo <- paste0("M",lista_clientes$m)
final <- dcast(data = lista_clientes, account_id + login + first_payment + tpv_group  ~ m_novo, value.var = "tpv")
final <- final[final$first_payment <= month_max,]
final <- final[is.na(final[,which(names(final)==paste0("M",churn_month))]),]
return (final)
}
base <- getCohortBase
base <- getCohortBase()
library(hubspotAPI)
setwd("C:/Users/mauricio.chigutti/Google Drive/API Integration/Funil Hubspot")
contatosD <- suppressWarnings(arrangeDate (read.csv("contatos.csv", sep = ",",stringsAsFactors = FALSE)))
cohortpath = "C:/Users/mauricio.chigutti/Google Drive/Cohort/Churn4.csv"
comercialpath = "C:/Users/mauricio.chigutti/Google Drive/Clientes do Comercial/clientesComercial.csv"
cohortBase <- getCohortBase(cohortpath)
comercial <- read.csv(comercialpath, stringsAsFactors = FALSE, sep = ";")
x <-filtraContatos(contatosD,vendedor = "all",type = "tri", lead_source_geral = "all", lead_source = "all", ecommerce_platform = "all", Q = 3)
library(shinydashboard)
library(magrittr)
library(httr)
library(jsonlite)
library(plyr)
library(dplyr)
library(grid)
library(lubridate)
library(ggplot2)
library(scales)
library(gridExtra)
library(zoo)
library(reshape2)
library(tidyr)
library(hubspotAPI)
x <-filtraContatos(contatosD,vendedor = "all",type = "tri", lead_source_geral = "all", lead_source = "all", ecommerce_platform = "all", Q = 3)
View(x)
criaFunilComercial(contatosD,vendedor = "all",type = "tri", lead_source_geral = "all", lead_source = "all", ecommerce_platform = "all", Q = 3)
x[x$email=="financeiro@espacocasaecia.com.br",]
a <- x[x$email=="financeiro@espacocasaecia.com.br",]
a
unicos <- unique(a$email)
a[a$email%in%unicos,]
unicos
aggregate(a,min())
aggregate(a,min
)
aggregate(a~emaol,min)
aggregate(a~email,min)
aggregate(a, by=email,min)
aggregate(a, by=email,FUN = min)
aggregate(a, by="email")
a
aggregate(a, by="email", FUN = min)
aggregate(a, by=list("email"), FUN = min)
a
aggregate(a, by=list("email"), FUN = min)
aggregate(a, by=list(email), FUN = min)
aggregate(a, by=list(a$email), FUN = min)
aggregate(a, by=list(a$email), FUN = min)
aggregate(a, by=list(a$email), FUN = max)
unicos <- aggregate(x, by=list(a$email), FUN = max)
unicos <- aggregate(x, by=list(x$email), FUN = min)
teste <- unique(unicos$email)
teste2 <- unique(x$email[x$estagio=="Reuniao"])
View(unicos)
View(x)
to <- x[c(which(names(x)=="deal_stage"),which(names(x)=="estagio")),]
View(to)
to <- x[,c(which(names(x)=="deal_stage"),which(names(x)=="estagio"))]
View(unicos)
x <-filtraContatos(contatosD,vendedor = "all",type = "tri", lead_source_geral = "all", lead_source = "all", ecommerce_platform = "all", Q = 3)
library(hubspotAPI)
library(httr)
library(jsonlite)
library(plyr)
library(dplyr)
library(grid)
library(lubridate)
library(ggplot2)
library(scales)
library(gridExtra)
library(zoo)
library(reshape2)
library(tidyr)
setwd("C:/Users/mauricio.chigutti/Google Drive/API Integration/Funil Hubspot")
cohortpath = "C:/Users/mauricio.chigutti/Google Drive/Cohort/Churn4.csv"
comercialpath = "C:/Users/mauricio.chigutti/Google Drive/Clientes do Comercial/clientesComercial.csv"
contatosD <- suppressWarnings(arrangeDate (read.csv("contatos.csv", sep = ",",stringsAsFactors = FALSE)))
filtrados <- filtraContatos(contatos = contatosD, type = "safra", dataRef = "2017-07-01", dataFinal = "2017-09-01")
meantime <- funilTempoMedio(filtrados)
meantime
meantime$resumo$`Marcelo Conforto`[,1]
mean(meantime$resumo$`Marcelo Conforto`[,1])
mean(meantime$resumo$`Marcelo Conforto`[,1], digits=0)
mean(meantime$resumo$`Marcelo Conforto`[,1], digits=1)
mean(meantime$resumo$`Marcelo Conforto`[,1], decimals=1)
mean(meantime$resumo$`Marcelo Conforto`[,1], decimal=1)
round(mean(meantime$resumo$`Marcelo Conforto`[,1]), digits=0)
round(meantime$table_sm), digits=0)
round(meantime$table_sm, digits=0)
meantime$table_sm
round(as.numeric(meantime$table_sm), digits=0)
as.numeric(meantime$table_sm)
library(hubspotAPI)
meantime <- funilTempoMedio(filtrados)
filtrados
meantime <- funilTempoMedio(filtrados)
library(hubspotAPI)
meantime <- funilTempoMedio(filtrados)
meantime
library(hubspotAPI)
meantime <- funilTempoMedio(filtrados)
meantime
shiny::runApp()
meantime$resumo[["Marcelo Conforto"]]
meantime$table_sm
filtraContatos(contatos = contatosD, type = "tri", Q = 3)
funilTempoMedio(filtraContatos(contatos = contatosD, type = "tri", Q = 3))
funilTempoMedio(filtraContatos(contatos = contatosD, type = "tri", Q = 3))$table_sm
library(hubspotAPI)
meantime$resumo$`Matheus Nicoletti`
rownames(meantime$resumo$`Matheus Nicoletti`)
data.table::data.table(meantime$resumo$`Matheus Nicoletti`)
data.table::data.table(meantime$resumo$`Matheus Nicoletti`,options = list(pageLength = 10))
